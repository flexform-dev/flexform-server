{% extends '@Admin/forms/page.html.twig' %}

{% block title %}Notifications / {{ formEntity.name }} / Forms{% endblock %}

{% block section %}
    <div class="card">
        <header class="card-header">
            <p class="card-header-title">
                Notifications
            </p>
        </header>
        <div class="card-content">
            <div class="content">
                <div x-data="browserPushNotifications()" class="is-flex is-justify-content-space-between">
                    <div class="is-flex is-align-items-center">
                        <div>
                            Send browser push notification when a new form is submitted
                            <p class="is-size-7 has-text-danger" x-show="!isBrowserPushNotificationConfigEnabled" style="display: none;">
                                Please add tokens in <a href="{{ path('admin_configs') }}">settings</a> to enable this feature
                            </p>
                            <p class="is-size-7" x-show="!isPermissionGranted" style="display: none;">
                                Please <a @click="askForPermission">grand permission</a> to send notifications
                            </p>
                        </div>
                    </div>
                    <div>
                        <button
                            class="button is-small is-light"
                            :class="{
                                'is-success': isBrowserPushNotificationConfigEnabled && isPermissionGranted && !isBrowserPushNotificationEnabled,
                                'is-danger': isBrowserPushNotificationEnabled,
                                'is-loading': loading
                            }"
                            :disabled="!isBrowserPushNotificationConfigEnabled || !isPermissionGranted"
                            @click="subscribeToPushNotifications"
                        >
                            <span x-show="isBrowserPushNotificationEnabled">Turn OFF</span>
                            <span x-show="!isBrowserPushNotificationEnabled">Turn ON</span>
                        </button>
                    </div>
                </div>
                <div x-data="emailNotifications()" class="is-flex is-justify-content-space-between mt-4">
                    <div class="is-flex is-align-items-center">
                        <div>
                            Send Email notification when a new form is submitted
                            <p class="is-size-7 has-text-danger" x-show="!isEmailNotificationConfigEnabled" style="display: none;">
                                Please fill <a href="{{ path('admin_configs') }}">SMTP settings</a> to enable this feature
                            </p>
                        </div>
                    </div>
                    <div>
                        <button
                            class="button is-small is-light"
                            :class="{
                                'is-success': isEmailNotificationConfigEnabled && !isEmailNotificationEnabled,
                                'is-danger': isEmailNotificationEnabled,
                                'is-loading': loading
                            }"
                            :disabled="!isEmailNotificationConfigEnabled"
                            @click="subscribeToEmailNotifications"
                        >
                            <span x-show="isEmailNotificationEnabled">Turn OFF</span>
                            <span x-show="!isEmailNotificationEnabled">Turn ON</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function browserPushNotifications() {
            return {
                isBrowserPushNotificationConfigEnabled: {{ isBrowserPushNotificationConfigEnabled ? 'true' : 'false' }},
                isPermissionGranted: Notification.permission === 'granted',
                isBrowserPushNotificationEnabled: {{ isBrowserPushNotificationEnabled ? 'true' : 'false' }},
                loading: false,
                subscribeToPushNotifications: function () {
                    if (!this.isBrowserPushNotificationConfigEnabled || !this.isPermissionGranted) {
                        return;
                    }

                    this.loading = true;

                    fetch('{{ path('admin_api_forms_notifications_browser_push', { id: formEntity.id }) }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    })
                        .then((response) => {
                            if (response.status === 200) {
                                this.isBrowserPushNotificationEnabled = !this.isBrowserPushNotificationEnabled;
                            } else {
                                alert('Something went wrong. Please try again later.');
                            }
                        })
                        .catch((error) => {
                            alert(error);
                        })
                        .finally(() => {
                            this.loading = false;
                        });
                },
                askForPermission: function () {
                    this.loading = true;
                    navigator.serviceWorker.ready.then(function(registration) {
                        return registration.pushManager.subscribe({
                            userVisibleOnly: true,
                            applicationServerKey: '{{ vapidPublicKey }}'
                        }).then(function(subscription) {
                            fetch('{{ path('admin_api_users_save_browser_token') }}', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    endpoint: subscription.endpoint,
                                    publicKey: btoa(String.fromCharCode.apply(null, new Uint8Array(subscription.getKey('p256dh')))),
                                    authToken: btoa(String.fromCharCode.apply(null, new Uint8Array(subscription.getKey('auth')))),
                                })
                            }).then().finally(function() {
                                document.location.reload();
                            });
                        }).catch(function() {
                            alert('You have blocked notifications. Please allow them in your browser.');
                        });
                    });
                }
            }
        }
        function emailNotifications() {
            return {
                isEmailNotificationConfigEnabled: {{ isEmailNotificationConfigEnabled ? 'true' : 'false' }},
                isEmailNotificationEnabled: {{ isEmailNotificationEnabled ? 'true' : 'false' }},
                loading: false,
                subscribeToEmailNotifications: function () {
                    if (!this.isEmailNotificationConfigEnabled) {
                        return;
                    }

                    this.loading = true;

                    fetch('{{ path('admin_api_forms_notifications_email', { id: formEntity.id }) }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    })
                        .then((response) => {
                            if (response.status === 200) {
                                this.isEmailNotificationEnabled = !this.isEmailNotificationEnabled;
                            } else {
                                alert('Something went wrong. Please try again later.');
                            }
                        })
                        .catch((error) => {
                            alert(error);
                        })
                        .finally(() => {
                            this.loading = false;
                        });
                },
            }
        }
    </script>
{% endblock %}
